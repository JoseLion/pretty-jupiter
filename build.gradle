buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id('checkstyle')
  id('jacoco')
  id('java-gradle-plugin')

  id('com.gradle.plugin-publish') version '1.2.1'
  id('io.github.joselion.pretty-jupiter') version '2.2.1'
  id('io.github.joselion.strict-null-check') version '2.3.0'
  id('se.solrike.sonarlint') version '1.0.0-beta.15'
}

group = 'io.github.joselion'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(20)
    vendor = JvmVendorSpec.ORACLE
  }
}

javadoc {
  options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
  options.deprecation = true
}

dependencyLocking {
  lockAllConfigurations()
}

checkstyle {
  setToolVersion('10.12.3')
}

sonarlint {
  excludeRules = [
    'java:S107', // Allow constructors with more than 7 parameters
    'java:S3776', // Allow methods with more than 15 lines
    'java:S4032', // Allow packages only containing `package-info.java`
  ]
  includeRules = [
    'java:S4266', // "Stream.collect()" calls should not be redundant
  ]
}

strictNullCheck {
  versions {
    eclipseAnnotations = '2.2.700'
    findBugs = '3.0.2'
  }
}

repositories {
  mavenCentral()
}

dependencies {
	annotationProcessor('org.projectlombok:lombok:1.18.28')
  compileOnly('org.projectlombok:lombok:1.18.28')
  sonarlintPlugins('org.sonarsource.java:sonar-java-plugin:7.20.0.31692')

  implementation(localGroovy())

	testAnnotationProcessor('org.projectlombok:lombok:1.18.28')
  testCompileOnly('org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.700')
  testCompileOnly('org.projectlombok:lombok:1.18.28')
  testImplementation('org.mockito:mockito-core:5.5.0')
}

testing {
  suites {
    configureEach {
      useJUnitJupiter('5.10.0')

      dependencies {
        implementation('org.assertj:assertj-core:3.24.2')
      }
    }

    testkit(JvmTestSuite) {
      dependencies {
        implementation(gradleTestKit())
      }

      targets {
        all {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
    }
  }
}

prettyJupiter {
  duration {
    customThreshold = [testkit: 1000]
  }
}

jacoco {
  toolVersion('0.8.10')
}

jacocoTestReport {
  dependsOn(test, testkit)

  reports {
    html.required = true
    xml.required = true
  }
}

gradlePlugin {
  website = 'https://joselion.github.io/pretty-jupiter/'
  vcsUrl = 'https://github.com/JoseLion/pretty-jupiter'

  plugins {
    prettyJupiter {
      id = 'io.github.joselion.pretty-jupiter'
      implementationClass = 'io.github.joselion.prettyjupiter.PrettyJupiterPlugin'
      displayName = 'Pretty Jupiter Plugin'
      description = 'Gradle plugin to log JUnit Jupiter tests with a pretty Mocha.js style'
      tags.set([
        'junit',
        'jupiter',
        'junit5',
        'logger',
        'pretty',
        'tdd',
        'bdd'
      ])
    }
  }

  testSourceSets.add(sourceSets.testkit)
}

task preparePublish() {
  doLast {
    def publishKey = findProperty('gradlePublishKey')
    def publishSecret = findProperty('gradlePublishSecret')

    System.properties.setProperty('gradle.publish.key', publishKey)
    System.properties.setProperty('gradle.publish.secret', publishSecret)
  }
}

tasks.named('check') {
  dependsOn(testing.suites.testkit)
}

tasks.named('publishPlugins') {
  dependsOn(tasks.preparePublish)
}
