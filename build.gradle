buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id('checkstyle')
  id('jacoco')
  id('java-gradle-plugin')

  alias(libs.plugins.pluginPublish)
  alias(libs.plugins.prettyJupiter)
  alias(libs.plugins.strictNullCheck)
  alias(libs.plugins.sonarlint)
}

group = 'io.github.joselion'

java {
  sourceCompatibility = JavaLanguageVersion.of(22)
  toolchain {
    languageVersion = JavaLanguageVersion.of(22)
    vendor = JvmVendorSpec.ORACLE
  }
}

javadoc {
  options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
  options.deprecation = true
}

dependencyLocking {
  lockAllConfigurations()
}

checkstyle {
  setToolVersion(libs.versions.checkstyle.get())
  setMaxWarnings(0)
}

sonarLint {
  languages {
    include('java')
  }
  rules {
    enable(
      'java:S4266', // "Stream.collect()" calls should not be redundant
    )
    disable(
      'java:S107', // Allow constructors with more than 7 parameters
      'java:S3776', // Allow methods with more than 15 lines
      'java:S4032', // Allow packages only containing `package-info.java`
      'java:S6203', // Allow textbloks in lambda expressions
    )
  }
}

strictNullCheck {
  addEclipse()
  packageInfo.useEclipse()
}

// Workaround for: https://github.com/checkstyle/checkstyle/issues/14211
configurations.checkstyle {
  resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
    select("com.google.guava:guava:0")
  }
}

repositories {
  mavenCentral()
}

dependencies {
  annotationProcessor(libs.lombok)
  compileOnly(libs.lombok)
  sonarlintCorePlugins(libs.sonarlint.java)

  implementation(localGroovy())
}

testing {
  suites {
    configureEach {
      useJUnitJupiter(libs.versions.junit.get())

      dependencies {
        annotationProcessor(libs.lombok)
        compileOnly(libs.lombok)

        implementation(libs.mockito)
        implementation(libs.assertj)
      }
    }

    testkit(JvmTestSuite) {
      dependencies {
        implementation(gradleTestKit())
      }

      targets {
        all {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
    }
  }
}

prettyJupiter {
  duration {
    customThreshold = [testkit: 1000]
  }
}

jacoco {
  setToolVersion(libs.versions.jacoco.get())
}

jacocoTestReport {
  dependsOn(test, testkit)

  reports {
    html.required = true
    xml.required = true
  }
}

gradlePlugin {
  website = 'https://joselion.github.io/pretty-jupiter/'
  vcsUrl = 'https://github.com/joselion/pretty-jupiter'

  plugins {
    prettyJupiter {
      id = 'io.github.joselion.pretty-jupiter'
      implementationClass = 'io.github.joselion.prettyjupiter.PrettyJupiterPlugin'
      displayName = 'Pretty Jupiter Plugin'
      description = 'Gradle plugin to log JUnit Jupiter tests with a pretty Mocha.js style'
      tags.set([
        'junit',
        'jupiter',
        'junit5',
        'logger',
        'pretty',
        'tdd',
        'bdd'
      ])
    }
  }

  testSourceSets.add(sourceSets.testkit)
}

task preparePublish() {
  doLast {
    def publishKey = findProperty('gradlePublishKey')
    def publishSecret = findProperty('gradlePublishSecret')

    System.properties.setProperty('gradle.publish.key', publishKey)
    System.properties.setProperty('gradle.publish.secret', publishSecret)
  }
}

tasks.named('check') {
  dependsOn(testing.suites.testkit)
}

tasks.named('publishPlugins') {
  dependsOn(tasks.preparePublish)
}
